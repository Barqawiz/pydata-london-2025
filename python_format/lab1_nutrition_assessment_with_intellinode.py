# -*- coding: utf-8 -*-
"""Lab1 - Nutrition Assessment with IntelliNode

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j22IbgkzpCZug3xQCgqfyfuakNBPBevu

# Multi-Agent System - Nutrition Assessment System
This notebook demonstrates how to build a multi-agent clinical system using IntelliNode, where:

- **Agent 1**: Analyzes client notes to identify nutrition needs and health priorities.
- **Agent 2**: Creates personalized meal plan based on the assessment.

**Objectives**

In this tutorial, you will learn how to:
- Connect multiple AI providers in a single workflow by integrating OpenAI's GPT-4 and Anthropic's Claude
- Build a graph-based multi-agent system where agents pass data through defined dependencies
- Implement a practical healthcare workflow.

## Setup and Imports
"""

!pip install intelli python-dotenv

import os
import asyncio
from dotenv import load_dotenv
from intelli.flow import Agent, Task, Flow, TextTaskInput, AgentTypes
import json

# Load environment variables
load_dotenv()

# Get API keys
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
ANTHROPIC_KEY = os.getenv("ANTHROPIC_API_KEY")

print(f"OpenAI Key: {'Available' if OPENAI_KEY else 'Error to load the key'}")
print(f"Anthropic Key: {'Available' if ANTHROPIC_KEY else 'Error to load the key'}")

"""## Client Case Notes
A brief profile of the user seeking nutrition guidance.
"""

case_notes = """
Client: Sarah Chen, 42-year-old female
Weight: 180 lbs, Height: 5'4
Health: Pre-diabetic, high blood pressure (controlled with medication)
Current diet: Skips breakfast, buys lunch, eats late dinners
Activity: Walks occasionally, sits most of the day, sleeps poorly
Allergies: Lactose intolerant, allergic to shellfish
Goals: Lose 20 pounds, prevent diabetes, have more energy
Preferences: Loves Asian and Mediterranean food, dislikes fish, needs quick meals
Budget: Moderate, prefers affordable ingredients
"""

"""## Create Agents
Set up two specialized agents - one for assessment and one for planning.
"""

# Agent 1: Nutrition Assessor (OpenAI)
nutrition_assessor = Agent(
    agent_type=AgentTypes.TEXT.value,
    provider="openai",
    mission="Extract nutrition-relevant information from client notes",
    model_params={"key": OPENAI_KEY, "model": "gpt-4.1"}
)

# Agent 2: Meal Planner (Anthropic)
meal_planner = Agent(
    agent_type=AgentTypes.TEXT.value,
    provider="anthropic",
    mission="Create personalized meal plans",
    model_params={"key": ANTHROPIC_KEY, "model": "claude-sonnet-4-20250514"}
)

"""## Create Tasks
Define what each agent should do.
"""

# Task 1: Assess nutrition needs
assessment_task = Task(
    TextTaskInput(f"""
    Review this client case and extract:
    - Health conditions to consider
    - Current eating problems
    - Allergies and restrictions
    - Personal goals
    - Food preferences
    - Main nutrition priorities

    Case details:
    {case_notes}
    """),
    nutrition_assessor,
    log=True
)

# Task 2: Create meal plan
planning_task = Task(
    TextTaskInput(
        "Create a simple 3-day meal plan for weight loss and diabetes prevention. "
        "Include easy breakfast, lunch, dinner, and one snack per day."
    ),
    meal_planner,
    log=True
)

"""## Create Flow
Connect the agents so the assessment flows into the meal planning.
"""

flow = Flow(
    tasks={
        "assessment_task": assessment_task,
        "planning_task": planning_task
    },
    map_paths={
        "assessment_task": ["planning_task"],
        "planning_task": []
    },
    log=True
)

# generate flow graph
flow.generate_graph_img(
    name="nutrition_flow",
    save_path="./output/"
)

"""## Run the Flow"""

async def run_nutrition_workflow():
    results = await flow.start()

    return results

results = await run_nutrition_workflow()

print("=== NUTRITION ASSESSMENT (OpenAI) ===")
print(results["assessment_task"]["output"])

print("\n\n=== MEAL PLAN (Anthropic) ===")
print(results["planning_task"]["output"])

